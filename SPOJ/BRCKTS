//                      go_on
//              I am the one who knocks !!
#include <bits/stdc++.h>
using namespace std;


//      LOOPS AND MEM
#define mz(a) memset(a,0,sizeof(a))
#define md(a,m,n) memset(a,-1,sizeof(a[0][0])*m*n);
#define mm(a) memset(a,-1,sizeof(a))
#define minf(a) memset(a,MEMSET_INF,sizeof(a));
#define SZ(x) ((int)(x).size())
#define f(i,a,n) for(long long int i=a;i<=n;++i)
#define fs(i,a,n) for(long long int i=a;i<n;++i)
#define fl(i,n,a) for(long long int i=n;i>=a;--i)


//       I/O
#define i(n) cin>>n
#define is(n) scanf("%s",n)
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define o(n) cout<<n
#define p(n) printf("%d",n)
#define ps printf(" ")
#define pn printf("\n")
#define pl(n) printf("%lld",n)
#define os cout<<" "
#define on cout<<"\n"


//       CONTAINERS
typedef vector <int> vi;
typedef pair<int, int> pii;
#define PB push_back
#define MP make_pair
#define ff first
#define ss second
#define all(a)  a.begin(),a.end()
#define fv(i,v) for(auto i = v.begin();i !=v.end(); ++i)


//        DEF AND INIT
#define ll long long int
#define MOD (ll)(1e9+7)
#define eps 1e-15
const int MAX = 10005;

struct node
{
  int O,C;

  void PutVal(char val)
  {
      if(val=='(')    {O=1;C=0;}
      else            {C=1;O=0;}
  }

  void add(node& left, node& right)
  {
      int mn=min(left.O,right.C);
      O=left.O+right.O-mn;
      C=left.C+right.C-mn;
  }

  int query()
  {
      return (O+C);
  }
};

template<class T, class V>
class STree
{
      node* nodes;
      int N;

    public:
      STree(T arr[], int N)
      {
        this->N = N;
        nodes = new node[getSize(N)];
        build(arr, 1, 0, N-1);
      }

      ~STree()
      {
        delete[] nodes;
      }

      V query(int lo, int hi)
      {
        node result = query(1, 0, N-1, lo, hi);
        return result.query();
      }

      void update(int index, T val)
      {
        update(1, 0, N-1, index, val);
      }

      private:
      void build(T arr[], int idx, int lo, int hi)
      {
            if(lo==hi)
            {
                  nodes[idx].PutVal(arr[lo]);
                  return;
            }
            int left = 2 * idx, right = left + 1, mid = (lo + hi) / 2;
            build(arr, left, lo, mid);
            build(arr, right, mid + 1, hi);
            nodes[idx].add(nodes[left], nodes[right]);
      }

      node query(int idx, int left, int right, int lo, int hi)
      {
        if (left == lo && right == hi)
          return nodes[idx];

        int mid = (left + right) / 2;
        if (lo > mid)
          return query(2*idx+1, mid+1, right, lo, hi);
        if (hi <= mid)
          return query(2*idx, left, mid, lo, hi);

        node leftResult = query(2*idx, left, mid, lo, mid);
        node rightResult = query(2*idx+1, mid+1, right, mid+1, hi);
        node result;
        result.add(leftResult, rightResult);
        return result;
      }

      int getSize(int N)
      {
        int sz = 1;
        for (; sz < N; sz <<= 1);
        return sz << 1;
      }

      void update(int idx, int lo, int hi, int index, T val)
      {
        if (lo == hi)
        {
            nodes[idx].PutVal(val);
            return;
        }
        int left = 2 * idx, right = left + 1, mid = (lo + hi) / 2;
        if (index <= mid)
          update(left, lo, mid, index, val);
        else
          update(right, mid+1, hi, index, val);

        nodes[idx].add(nodes[left], nodes[right]);
      }
};
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    ll n,q,k;
    char s[30004];
    f(t,1,10)
    {
        i(n);
        i(s);
        STree<char,bool> seg(s,n);
        o("Test ");o(t);o(":\n");
        i(q);
        while(q--)
        {
            i(k);
            if(k)
            {
                s[k-1]=(s[k-1]=='(')?')':'(';
                seg.update(k-1,s[k-1]);
            }
            else
            {
                if(seg.query(0,n-1))    o("NO\n");
                else                    o("YES\n");
            }
        }
    }
    return 0;
}
