//                      go_on
//              I am the one who knocks !!
#include <bits/stdc++.h>
using namespace std;


//      LOOPS AND MEM
#define mz(a) memset(a,0,sizeof(a))
#define md(a,m,n) memset(a,-1,sizeof(a[0][0])*m*n);
#define mm(a) memset(a,-1,sizeof(a))
#define minf(a) memset(a,MEMSET_INF,sizeof(a));
#define SZ(x) ((int)(x).size())
#define f(i,a,n) for(long long int i=a;i<=n;++i)
#define fs(i,a,n) for(long long int i=a;i<n;++i)
#define fl(i,n,a) for(long long int i=n;i>=a;--i)


//       I/O
#define i(n) cin>>n
#define is(n) scanf("%s",n)
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define o(n) cout<<n
#define p(n) printf("%d",n)
#define ps printf(" ")
#define pn printf("\n")
#define pl(n) printf("%lld",n)
#define os cout<<" "
#define on cout<<"\n"


//       CONTAINERS
typedef vector <int> vi;
typedef pair<int, int> pii;
#define PB push_back
#define MP make_pair
#define ff first
#define ss second
#define all(a)  a.begin(),a.end()
#define fv(i,v) for(auto i = v.begin();i !=v.end(); ++i)


//        DEF AND INIT
#define ll long long int
#define MOD (ll)(1e9+7)
#define eps 1e-15
const int MAX = 200005;

int a[MAX],bit[MAX],vis[MAX],cnt,b[MAX];
vector< pair < char,int > > v;
map <int,int> mp;

void update(int idx,int n,int val)
{
    while(idx<=n)
    {
        bit[idx]+=val;
        idx+=idx&(-idx);
    }
}

int query(int idx)
{
    int ans=0;
    while(idx>0)
    {
        ans+=bit[idx];
        idx=idx&(idx-1);
    }
    return ans;
}

//               COMPRESSION
void compress(int n)
{
	f(i,0,n-1)	          mp[a[i]]++;
	cnt=0;
	for(auto &i:mp)	      i.ss=++cnt;
	f(i,0,n-1)            {b[mp[a[i]]]=a[i];a[i]=mp[a[i]];}
}

int main()
{
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    int n,x,idx=0,id=0,ind;
    char c;
    i(n);
    mz(bit);
    f(i,0,n-1)
    {
        i(c);i(x);
        v.PB(MP(c,x));
        if(c=='I')
        {
            a[idx++]=x;
        }
    }
    compress(idx);
    for(auto i:v)
    {
        if(i.ff=='I')
        {
            ind=mp[i.ss];
            if(!vis[ind])
            {
                update(ind+1,idx+1,1);
                vis[ind]++;
            }
        }
        else if(i.ff=='D')
        {
            if((mp.find(i.ss))!=mp.end())
            {
                ind=mp[i.ss];
                if(vis[ind])
                {
                    update(ind+1,idx+1,-1);
                    vis[ind]=0;
                }
            }
        }
        else if(i.ff=='C')
        {
            auto it=mp.lower_bound(i.ss);
            if(it==mp.end())
            {
                o(query(cnt+1));on;
            }
            else    o(query(it->ss));on;
        }
        else
        {
            int l=1,r=cnt+1;
            while(l<=r)
            {
                int m=(l+r)>>1;
                if(query(m)>=(i.ss))  r=m-1;
                else                  l=m+1;
            }
            if(l>(cnt+1))   o("invalid\n");
            else            o(b[l-1]),on;
        }
    }
    return 0;
}
